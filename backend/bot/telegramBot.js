// utils/telegramBot.js
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const config = require('../config/config');
const db = require('../config/db');
const express = require('express');
const createStartHandler = require('./handlers/startHandler');
const createApiKeysHandler = require('./handlers/apiKeys/index');

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const authCodes = new Map();
const userStates = new Map();

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
let bot;
let webhookServer;
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞
 */
function startBot() {
  try {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    if (!token) {
      console.error('TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω.');
      return;
    }
    
    const webhookUrl = process.env.TELEGRAM_WEBHOOK_URL;
    if (!webhookUrl) {
      console.error('TELEGRAM_WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–µ–±—Ö—É–∫.');
      return;
    }
    
    const port = process.env.TELEGRAM_WEBHOOK_PORT || 8443;
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞
    bot = new TelegramBot(token, {
      webHook: {
        port: port
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    bot.setWebHook(`${webhookUrl}/bot${token}`);
    
    console.log(`Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
    console.log(`Webhook URL: ${webhookUrl}/bot${token}`);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    setupEventHandlers();
    
    return bot;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegram –±–æ—Ç–∞:', error);
  }
}

function setupEventHandlers() {
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–æ–¥—É–ª—è
  const startHandler = createStartHandler(bot, authCodes, cleanExpiredTokens);
  bot.onText(/\/start(?:\s+(.+))?/, startHandler);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ API –∫–ª—é—á–µ–π
  const apiKeysHandler = createApiKeysHandler(bot);
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ–ª–ø-–∫–æ–º–∞–Ω–¥—É
  bot.onText(/\/help/, (msg) => {
    const userId = msg.from.id;
    bot.sendMessage(
      userId,
      `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n` +
      `/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n` +
      `/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n\n` +
      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏.`,
      { parse_mode: 'Markdown' }
    );
  });
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
 */
function cleanExpiredTokens() {
  const now = Math.floor(Date.now() / 1000);
  for (const [userId, authInfo] of authCodes.entries()) {
    if (now > authInfo.expires) {
      authCodes.delete(userId);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 */
async function verifyToken(userId, token) {
  const authInfo = authCodes.get(userId.toString());
  if (!authInfo || authInfo.token !== token) {
    return false;
  }
  
  const now = Math.floor(Date.now() / 1000);
  return now < authInfo.expires;
}

/**
 * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
 */
function stopBot() {
  if (bot) {
    bot.close();
    console.log('Telegram –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

module.exports = {
  startBot,
  stopBot,
  verifyToken,
  bot
};