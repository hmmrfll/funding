// bot/handlers/tradingHandler.js
const paradexTradingService = require('../../services/paradexTradingService');
const hyperliquidTradingService = require('../../services/hyperliquidTradingService');

module.exports = function createTradingHandler(bot) {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const userTradingStates = new Map();

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const messageId = query.message.message_id;
    const data = query.data;
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (!data.startsWith('trade_')) {
      return;
    }
    
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
      if (data === 'trade_menu_open') {
        await bot.editMessageText(
          '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'Paradex', callback_data: 'trade_open_paradex' },
                  { text: 'HyperLiquid', callback_data: 'trade_open_hyperliquid' }
                ],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
              ]
            }
          }
        );
      }
      else if (data === 'trade_menu_close') {
        await bot.editMessageText(
          '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏:',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'Paradex', callback_data: 'trade_close_paradex' },
                  { text: 'HyperLiquid', callback_data: 'trade_close_hyperliquid' }
                ],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
              ]
            }
          }
        );
      }
      else if (data === 'trade_menu_positions') {
        await bot.editMessageText(
          '–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π:',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [
                  { text: 'Paradex', callback_data: 'trade_positions_paradex' },
                  { text: 'HyperLiquid', callback_data: 'trade_positions_hyperliquid' }
                ],
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
              ]
            }
          }
        );
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Paradex
      else if (data === 'trade_open_paradex') {
        userTradingStates.set(userId, { exchange: 'Paradex', action: 'open' });
        
        await bot.editMessageText(
          '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–ò–ú–í–û–õ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–ú–ï–† [–¶–ï–ù–ê]\n\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: BTC-USD-PERP buy 0.01\n' +
          '–ò–ª–∏ —Å —Ü–µ–Ω–æ–π: BTC-USD-PERP buy 0.01 50000',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'trade_cancel' }]
              ]
            }
          }
        );
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ HyperLiquid
      else if (data === 'trade_open_hyperliquid') {
        userTradingStates.set(userId, { exchange: 'HyperLiquid', action: 'open' });
        
        await bot.editMessageText(
          '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –°–ò–ú–í–û–õ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–ú–ï–† [–¶–ï–ù–ê]\n\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: BTC buy 0.01\n' +
          '–ò–ª–∏ —Å —Ü–µ–Ω–æ–π: BTC buy 0.01 50000',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'trade_cancel' }]
              ]
            }
          }
        );
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Paradex
      else if (data === 'trade_close_paradex') {
        userTradingStates.set(userId, { exchange: 'Paradex', action: 'close' });
        
        await bot.editMessageText(
          '–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC-USD-PERP)',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'trade_cancel' }]
              ]
            }
          }
        );
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ HyperLiquid
      else if (data === 'trade_close_hyperliquid') {
        userTradingStates.set(userId, { exchange: 'HyperLiquid', action: 'close' });
        
        await bot.editMessageText(
          '–í–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTC)',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'trade_cancel' }]
              ]
            }
          }
        );
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Paradex
      else if (data === 'trade_positions_paradex') {
        try {
          // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å Paradex
          const positions = await paradexTradingService.getAllPositions(userId);
          
          if (!positions || positions.length === 0) {
            await bot.editMessageText(
              '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ Paradex',
              {
                chat_id: userId,
                message_id: messageId,
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'trade_menu_positions' }]
                  ]
                }
              }
            );
          } else {
            let message = 'üìä *–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ Paradex:*\n\n';
            
            for (const pos of positions) {
              message += `*${pos.market}*: ${pos.side} ${pos.size} @ ${pos.avgEntryPrice} (PnL: ${pos.unrealizedPnl})\n`;
            }
            
            await bot.editMessageText(message, {
              chat_id: userId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'trade_menu_positions' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å Paradex:', error);
          await bot.editMessageText(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            {
              chat_id: userId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'trade_menu_positions' }]
                ]
              }
            }
          );
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π –Ω–∞ HyperLiquid
      else if (data === 'trade_positions_hyperliquid') {
        try {
          // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π —Å HyperLiquid
          const positions = await hyperliquidTradingService.getAllPositions(userId);
          
          if (!positions || positions.length === 0) {
            await bot.editMessageText(
              '–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ HyperLiquid',
              {
                chat_id: userId,
                message_id: messageId,
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'trade_menu_positions' }]
                  ]
                }
              }
            );
          } else {
            let message = 'üìä *–í–∞—à–∏ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ HyperLiquid:*\n\n';
            
            for (const pos of positions) {
              message += `*${pos.coin}*: ${pos.side} ${pos.size} @ ${pos.entryPrice} (PnL: ${pos.pnl})\n`;
            }
            
            await bot.editMessageText(message, {
              chat_id: userId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'trade_menu_positions' }]
                ]
              }
            });
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π —Å HyperLiquid:', error);
          await bot.editMessageText(
            '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            {
              chat_id: userId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'trade_menu_positions' }]
                ]
              }
            }
          );
        }
      }
      
      // –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
      else if (data === 'trade_cancel') {
        userTradingStates.delete(userId);
        
        await bot.editMessageText(
          '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
          {
            chat_id: userId,
            message_id: messageId,
            reply_markup: {
              inline_keyboard: [
                [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
              ]
            }
          }
        );
      }
      
      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:', error);
      await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  bot.on('message', async (msg) => {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!msg.text || !userTradingStates.has(msg.from.id)) {
      return;
    }
    
    const userId = msg.from.id;
    const state = userTradingStates.get(userId);
    
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
      if (state.action === 'open') {
        // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const params = msg.text.split(' ');
        
        if (params.length < 3) {
          await bot.sendMessage(
            userId,
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –°–ò–ú–í–û–õ –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï –†–ê–ó–ú–ï–† [–¶–ï–ù–ê]'
          );
          return;
        }
        
        const market = params[0];
        const side = params[1].toLowerCase();
        const size = parseFloat(params[2]);
        const price = params.length > 3 ? parseFloat(params[3]) : null;
        
        if (isNaN(size) || (price !== null && isNaN(price))) {
          await bot.sendMessage(
            userId,
            '–û—à–∏–±–∫–∞: —Ä–∞–∑–º–µ—Ä –∏ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.'
          );
          return;
        }
        
        if (side !== 'buy' && side !== 'sell') {
          await bot.sendMessage(
            userId,
            '–û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å buy –∏–ª–∏ sell.'
          );
          return;
        }
        
        let result;
        
        if (state.exchange === 'Paradex') {
          result = await paradexTradingService.openPosition(userId, market, side, size, price);
        } else if (state.exchange === 'HyperLiquid') {
          result = await hyperliquidTradingService.openPosition(userId, market, side, size, price);
        }
        
        await bot.sendMessage(
          userId,
          `‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω –Ω–∞ ${state.exchange}!\n\nID: ${result.id || result.orderId}\n–°—Ç–∞—Ç—É—Å: ${result.status || 'pending'}`
        );
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userTradingStates.delete(userId);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
      else if (state.action === 'close') {
        const symbol = msg.text.trim();
        
        let result;
        
        if (state.exchange === 'Paradex') {
          result = await paradexTradingService.closePosition(userId, symbol);
        } else if (state.exchange === 'HyperLiquid') {
          result = await hyperliquidTradingService.closePosition(userId, symbol);
        }
        
        await bot.sendMessage(
          userId,
          `‚úÖ –ü–æ–∑–∏—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –Ω–∞ ${state.exchange}!\n\nID: ${result.id || result.orderId}\n–°—Ç–∞—Ç—É—Å: ${result.status || 'pending'}`
        );
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userTradingStates.delete(userId);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:', error);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. ';
      
      if (error.response && error.response.data) {
        errorMessage += `–û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏: ${JSON.stringify(error.response.data)}`;
      } else {
        errorMessage += error.message;
      }
      
      await bot.sendMessage(userId, errorMessage);
      userTradingStates.delete(userId);
    }
  });

  return {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥—Ä—É–≥–∏–º –º–æ–¥—É–ª—è–º
    userTradingStates
  };
};