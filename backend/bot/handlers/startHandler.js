// handlers/startHandler.js
const axios = require('axios');
const db = require('../../config/db');
const { encryptData } = require('../../hooks/useEncryption');

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
 * @param {object} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
 * @param {Map} authCodes - –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤
 * @param {function} cleanExpiredTokens - –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
 */
module.exports = function createStartHandler(bot, authCodes, cleanExpiredTokens) {
  return async (msg, match) => {
    try {
      const userId = msg.from.id;
      const username = msg.from.username;
      const firstName = msg.from.first_name;
      const lastName = msg.from.last_name;
      const args = match[1]; // –ê—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ /start
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const userCheckQuery = `SELECT * FROM users WHERE telegram_id = $1`;
      const userResult = await db.query(userCheckQuery, [userId]);
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
      if (userResult.rows.length === 0) {
        console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å Telegram ID: ${userId}`);
        
        const insertQuery = `
          INSERT INTO users (telegram_id, username, first_name, last_name, role, auth_date) 
          VALUES ($1, $2, $3, $4, 'user', NOW()) 
          RETURNING *
        `;
        
        await db.query(insertQuery, [
          userId, 
          username || '', 
          firstName || '', 
          lastName || ''
        ]);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const updateQuery = `
          UPDATE users 
          SET username = COALESCE($1, username),
              first_name = COALESCE($2, first_name),
              last_name = COALESCE($3, last_name),
              auth_date = NOW()
          WHERE telegram_id = $4
        `;
        
        await db.query(updateQuery, [
          username, 
          firstName, 
          lastName, 
          userId
        ]);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç auth
      if (args && args.startsWith('auth_')) {
        try {
          // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const timestamp = Math.floor(Date.now() / 1000);
          const frontendUrl = process.env.FRONTEND_URL || 'http://localhost:3000';

          const token = encryptData(userId, timestamp);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ –≤ 1 —á–∞—Å
          authCodes.set(userId.toString(), {
            token,
            expires: timestamp + 3600 // 60 –º–∏–Ω—É—Ç = 3600 —Å–µ–∫—É–Ω–¥
          });
          
          // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const authUrl = `${frontendUrl}?user_id=${userId}&token=${token}`;
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const opts = {
            reply_markup: {
              inline_keyboard: [
                [{ text: 'üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', url: authUrl }]
              ]
            }
          };
          
          await bot.sendMessage(
            userId,
            `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–ª—è –≤—Ö–æ–¥–∞ –≤ Funding Arbitrage, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 1 —á–∞—Å.`,
            opts
          );
          
          // –ß–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã
          cleanExpiredTokens();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
          await bot.sendMessage(
            userId,
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          );
        }
      } else {
        // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–∞–π—Ç–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏
        const siteUrl = process.env.FRONTEND_URL || 'https://paradex.hedgie.org';
        
        const opts = {
          reply_markup: {
            inline_keyboard: [
              [
                { text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: siteUrl },
              ],
              [
                { text: 'üîë API keys', callback_data: 'api_keys_menu' }
              ]
            ]
          }
        };
        
        await bot.sendMessage(
          userId,
          `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ñ–∞–Ω–¥–∏–Ω–≥-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n\n` +
          `üîç –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".\n\n` +
          `üîë –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.`,
          opts
        );
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (msg && msg.from && msg.from.id) {
        bot.sendMessage(
          msg.from.id, 
          '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    }
  };
};