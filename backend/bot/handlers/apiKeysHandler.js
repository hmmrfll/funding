// handlers/apiKeysHandler.js
const db = require('../../config/db');
const crypto = require('crypto');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è API –∫–ª—é—á–µ–π
 */
function encryptApiKey(text) {
  const algorithm = 'aes-256-cbc';
  const key = process.env.API_KEY_SECRET || 'default-secret-key-for-api-encryption';
  const iv = crypto.randomBytes(16);
  
  const cipher = crypto.createCipheriv(algorithm, 
    crypto.createHash('sha256').update(key).digest().slice(0, 32), iv);
  
  let encrypted = cipher.update(text, 'utf8', 'hex');
  encrypted += cipher.final('hex');
  
  return iv.toString('hex') + ':' + encrypted;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏ API –∫–ª—é—á–µ–π
 */
function decryptApiKey(encrypted) {
  const algorithm = 'aes-256-cbc';
  const key = process.env.API_KEY_SECRET || 'default-secret-key-for-api-encryption';
  
  const parts = encrypted.split(':');
  const iv = Buffer.from(parts[0], 'hex');
  const encryptedText = parts[1];
  
  const decipher = crypto.createDecipheriv(algorithm, 
    crypto.createHash('sha256').update(key).digest().slice(0, 32), iv);
  
  let decrypted = decipher.update(encryptedText, 'hex', 'utf8');
  decrypted += decipher.final('utf8');
  
  return decrypted;
}

module.exports = function createApiKeysHandler(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const messageId = query.message.message_id;
    
    try {
      switch(query.data) {
        case 'api_keys_menu':
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏
          await bot.editMessageText(
            `üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏*\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π:`,
            {
              chat_id: userId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'Paradex', callback_data: 'api_keys_paradex' },
                    { text: 'HyperLiquid', callback_data: 'api_keys_hyperliquid' }
                  ],
                  [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'api_keys_back_to_main' }]
                ]
              }
            }
          );
          break;
          
        case 'api_keys_back_to_main':
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
          const siteUrl = process.env.FRONTEND_URL || 'https://paradex.hedgie.org';
          
          await bot.editMessageText(
            `–ü—Ä–∏–≤–µ—Ç, ${query.from.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ñ–∞–Ω–¥–∏–Ω–≥-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n\n` +
            `üîç –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".\n\n` +
            `üîë –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.`,
            {
              chat_id: userId,
              message_id: messageId,
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', url: siteUrl },
                  ],
                  [
                    { text: 'üîë API keys', callback_data: 'api_keys_menu' }
                  ]
                ]
              }
            }
          );
          break;
          
        case 'api_keys_paradex':
          await handleExchangeKeys(userId, messageId, 'Paradex', query.from.first_name);
          break;
          
        case 'api_keys_hyperliquid':
          await handleExchangeKeys(userId, messageId, 'HyperLiquid', query.from.first_name);
          break;
          
        case 'api_keys_back_to_exchanges':
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±–∏—Ä–∂
          await bot.editMessageText(
            `üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏*\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π:`,
            {
              chat_id: userId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: 'Paradex', callback_data: 'api_keys_paradex' },
                    { text: 'HyperLiquid', callback_data: 'api_keys_hyperliquid' }
                  ],
                  [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'api_keys_back_to_main' }]
                ]
              }
            }
          );
          break;
          
        case 'api_keys_add_paradex':
          await startKeyAddition(userId, messageId, 'Paradex');
          break;
          
        case 'api_keys_add_hyperliquid':
          await startKeyAddition(userId, messageId, 'HyperLiquid');
          break;
          
        case 'api_keys_delete_paradex':
          await confirmKeyDeletion(userId, messageId, 'Paradex');
          break;
          
        case 'api_keys_delete_hyperliquid':
          await confirmKeyDeletion(userId, messageId, 'HyperLiquid');
          break;
          
        case 'api_keys_confirm_delete_paradex':
          await deleteApiKey(userId, messageId, 'Paradex');
          break;
          
        case 'api_keys_confirm_delete_hyperliquid':
          await deleteApiKey(userId, messageId, 'HyperLiquid');
          break;
          
        case 'api_keys_cancel_delete':
          // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
          const exchange = userStates.get(userId)?.exchange || 'Paradex';
          await handleExchangeKeys(userId, messageId, exchange, query.from.first_name);
          break;
          
        case 'api_keys_cancel_add':
          // –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
          const cancelExchange = userStates.get(userId)?.exchange || 'Paradex';
          userStates.delete(userId); // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          await handleExchangeKeys(userId, messageId, cancelExchange, query.from.first_name);
          break;
      }
      
      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
      await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
  });
  
  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö –±–∏—Ä–∂–∏ –∏ –æ–ø—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async function handleExchangeKeys(userId, messageId, exchange, firstName) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π –±–∏—Ä–∂–∏
      const userKeyQuery = `
        SELECT id, api_key, is_active 
        FROM user_api_keys 
        WHERE user_id = (SELECT id FROM users WHERE telegram_id = $1) 
        AND exchange = $2
      `;
      const userKeyResult = await db.query(userKeyQuery, [userId, exchange]);
      
      let keyStatus = '';
      let actionButtons = [];
      
      if (userKeyResult.rows.length > 0) {
        const keyInfo = userKeyResult.rows[0];
        const status = keyInfo.is_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
        
        // –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const maskedKey = '********';
        
        keyStatus = `*–¢–µ–∫—É—â–∏–π –∫–ª—é—á:* ${maskedKey} (${status})`;
        actionButtons = [
          { text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á', callback_data: `api_keys_delete_${exchange.toLowerCase()}` },
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á', callback_data: `api_keys_add_${exchange.toLowerCase()}` }
        ];
      } else {
        keyStatus = `*–ö–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.*\n–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –¥–ª—è ${exchange}, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.`;
        actionButtons = [
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á', callback_data: `api_keys_add_${exchange.toLowerCase()}` }
        ];
      }
      
      await bot.editMessageText(
        `üîë *API –∫–ª—é—á–∏ –¥–ª—è ${exchange}*\n\n` +
        keyStatus + `\n\n` +
        `–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π API –∫–ª—é—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              actionButtons,
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'api_keys_back_to_exchanges' }]
            ]
          }
        }
      );
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö ${exchange}:`, error);
      
      await bot.editMessageText(
        `üîë *API –∫–ª—é—á–∏ –¥–ª—è ${exchange}*\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'api_keys_back_to_exchanges' }]
            ]
          }
        }
      );
    }
  }
  
  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
   */
  async function startKeyAddition(userId, messageId, exchange) {
    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
      userStates.set(userId, {
        state: 'waiting_api_key',
        exchange: exchange,
        messageId: messageId
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
      await bot.editMessageText(
        `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${exchange}*\n\n` +
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á.\n\n` +
        `*–í–∞–∂–Ω–æ:* –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_add' }]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
      userStates.delete(userId);
      
      await bot.editMessageText(
        `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
            ]
          }
        }
      );
    }
  }
  
  /**
   * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞
   */
  async function confirmKeyDeletion(userId, messageId, exchange) {
    try {
      // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±–∏—Ä–∂—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
      userStates.set(userId, { exchange: exchange });
      
      await bot.editMessageText(
        `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${exchange}*\n\n` +
        `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á –¥–ª—è ${exchange}?\n\n` +
        `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [
                { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `api_keys_confirm_delete_${exchange.toLowerCase()}` },
                { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_delete' }
              ]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
      
      await bot.editMessageText(
        `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
            ]
          }
        }
      );
    }
  }
  
  /**
   * –£–¥–∞–ª—è–µ—Ç API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
   */
  async function deleteApiKey(userId, messageId, exchange) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userQuery = `SELECT id FROM users WHERE telegram_id = $1`;
      const userResult = await db.query(userQuery, [userId]);
      
      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const dbUserId = userResult.rows[0].id;
      
      // –£–¥–∞–ª—è–µ–º –∫–ª—é—á
      const deleteQuery = `
        DELETE FROM user_api_keys
        WHERE user_id = $1 AND exchange = $2
      `;
      await db.query(deleteQuery, [dbUserId, exchange]);
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userStates.delete(userId);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
      await bot.editMessageText(
        `‚úÖ *API –∫–ª—é—á —É–¥–∞–ª–µ–Ω*\n\n` +
        `API –∫–ª—é—á –¥–ª—è ${exchange} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
            ]
          }
        }
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
      
      await bot.editMessageText(
        `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        {
          chat_id: userId,
          message_id: messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
            ]
          }
        }
      );
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç API –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
   */
  async function saveApiKey(userId, exchange, apiKey, apiSecret, passphrase = null) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userQuery = `SELECT id FROM users WHERE telegram_id = $1`;
      const userResult = await db.query(userQuery, [userId]);
      
      if (userResult.rows.length === 0) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      const dbUserId = userResult.rows[0].id;
      
      // –®–∏—Ñ—Ä—É–µ–º –∫–ª—é—á–∏
      const encryptedApiKey = encryptApiKey(apiKey);
      const encryptedApiSecret = encryptApiKey(apiSecret);
      const encryptedPassphrase = passphrase ? encryptApiKey(passphrase) : null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª—é—á –¥–ª—è —ç—Ç–æ–π –±–∏—Ä–∂–∏
      const checkQuery = `
        SELECT id FROM user_api_keys
        WHERE user_id = $1 AND exchange = $2
      `;
      const checkResult = await db.query(checkQuery, [dbUserId, exchange]);
      
      if (checkResult.rows.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
        const updateQuery = `
          UPDATE user_api_keys
          SET api_key = $1, api_secret = $2, passphrase = $3, is_active = TRUE
          WHERE user_id = $4 AND exchange = $5
        `;
        await db.query(updateQuery, [encryptedApiKey, encryptedApiSecret, encryptedPassphrase, dbUserId, exchange]);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        const insertQuery = `
          INSERT INTO user_api_keys (user_id, exchange, api_key, api_secret, passphrase, is_active)
          VALUES ($1, $2, $3, $4, $5, TRUE)
        `;
        await db.query(insertQuery, [dbUserId, exchange, encryptedApiKey, encryptedApiSecret, encryptedPassphrase]);
      }
      
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
      throw error;
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ API –∫–ª—é—á–µ–π
  bot.on('message', async (msg) => {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!msg.text) return;
    
    const userId = msg.from.id;
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!userStates.has(userId)) return;
    
    const userState = userStates.get(userId);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      try {
        await bot.deleteMessage(userId, msg.message_id);
      } catch (deleteError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError);
      }
      
      switch (userState.state) {
        case 'waiting_api_key':
          // –ü–æ–ª—É—á–∏–ª–∏ API –∫–ª—é—á, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç
          userState.apiKey = msg.text;
          userState.state = 'waiting_api_secret';
          
          await bot.editMessageText(
            `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${userState.exchange}*\n\n` +
            `API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API Secret.`,
            {
              chat_id: userId,
              message_id: userState.messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_add' }]
                ]
              }
            }
          );
          break;
          
        case 'waiting_api_secret':
          // –ü–æ–ª—É—á–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Å—Å—Ñ—Ä–∞–∑—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
          userState.apiSecret = msg.text;
          
          // –î–ª—è Paradex –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–∞—Å—Å—Ñ—Ä–∞–∑–∞
          if (userState.exchange === 'Paradex') {
            userState.state = 'waiting_passphrase';
            
            await bot.editMessageText(
              `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${userState.exchange}*\n\n` +
              `API Secret –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Å—Å—Ñ—Ä–∞–∑—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è).`,
              {
                chat_id: userId,
                message_id: userState.messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_add' }]
                  ]
                }
              }
            );
          } else {
            // –î–ª—è –±–∏—Ä–∂ –±–µ–∑ –ø–∞—Å—Å—Ñ—Ä–∞–∑—ã —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
            await finalizeKeyAddition(userId, userState);
          }
          break;
          
        case 'waiting_passphrase':
          // –ü–æ–ª—É—á–∏–ª–∏ –ø–∞—Å—Å—Ñ—Ä–∞–∑—É (–∏–ª–∏ "–Ω–µ—Ç"), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
          userState.passphrase = msg.text.toLowerCase() === '–Ω–µ—Ç' ? null : msg.text;
          await finalizeKeyAddition(userId, userState);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –∫–ª—é—á–µ–π:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await bot.sendMessage(
        userId,
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –∫–ª—é—á–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);
    }
  });
  
  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
   */
  async function finalizeKeyAddition(userId, userState) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await saveApiKey(
        userId,
        userState.exchange,
        userState.apiKey,
        userState.apiSecret,
        userState.passphrase
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await bot.editMessageText(
        `‚úÖ *API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω*\n\n` +
        `API –∫–ª—é—á –¥–ª—è ${userState.exchange} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –±–∏—Ä–∂–∏.`,
        {
          chat_id: userId,
          message_id: userState.messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${userState.exchange.toLowerCase()}` }]
            ]
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
      
      await bot.editMessageText(
        `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
        {
          chat_id: userId,
          message_id: userState.messageId,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${userState.exchange.toLowerCase()}` }]
            ]
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);
    }
  }
  
  return {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–≤–Ω–µ
    encryptApiKey,
    decryptApiKey
  };
};