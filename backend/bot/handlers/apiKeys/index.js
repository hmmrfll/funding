// handlers/apiKeys/index.js
const { userStates } = require('./storage');
const { getExchangesMenuMarkup, getMainMenuMarkup } = require('./ui');
const { 
  handleExchangeKeys, 
  startKeyAddition, 
  confirmKeyDeletion, 
  deleteApiKey,
  finalizeKeyAddition 
} = require('./actions');
const { encryptApiKey, decryptApiKey } = require('./crypto');

module.exports = function createApiKeysHandler(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const messageId = query.message.message_id;
    
    try {
      switch(query.data) {
        case 'api_keys_menu':
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏
          await bot.editMessageText(
            `üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏*\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π:`,
            {
              chat_id: userId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: getExchangesMenuMarkup()
            }
          );
          break;
          
        case 'api_keys_back_to_main':
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
          const siteUrl = process.env.FRONTEND_URL || 'https://paradex.hedgie.org';
          
          await bot.editMessageText(
            `–ü—Ä–∏–≤–µ—Ç, ${query.from.first_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ —Ñ–∞–Ω–¥–∏–Ω–≥-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞.\n\n` +
            `üîç –ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram".\n\n` +
            `üîë –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.`,
            {
              chat_id: userId,
              message_id: messageId,
              reply_markup: getMainMenuMarkup(siteUrl)
            }
          );
          break;
          
        case 'api_keys_paradex':
          await handleExchangeKeys(bot, userId, messageId, 'Paradex', query.from.first_name);
          break;
          
        case 'api_keys_hyperliquid':
          await handleExchangeKeys(bot, userId, messageId, 'HyperLiquid', query.from.first_name);
          break;
          
        case 'api_keys_back_to_exchanges':
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –±–∏—Ä–∂
          await bot.editMessageText(
            `üîë *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏*\n\n` +
            `–í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–µ–π –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–∫—É—â–∏—Ö –∫–ª—é—á–µ–π:`,
            {
              chat_id: userId,
              message_id: messageId,
              parse_mode: 'Markdown',
              reply_markup: getExchangesMenuMarkup()
            }
          );
          break;
          
        case 'api_keys_add_paradex':
          await startKeyAddition(bot, userId, messageId, 'Paradex');
          break;
          
        case 'api_keys_add_hyperliquid':
          await startKeyAddition(bot, userId, messageId, 'HyperLiquid');
          break;
          
        case 'api_keys_delete_paradex':
          await confirmKeyDeletion(bot, userId, messageId, 'Paradex');
          break;
          
        case 'api_keys_delete_hyperliquid':
          await confirmKeyDeletion(bot, userId, messageId, 'HyperLiquid');
          break;
          
        case 'api_keys_confirm_delete_paradex':
          await deleteApiKey(bot, userId, messageId, 'Paradex');
          break;
          
        case 'api_keys_confirm_delete_hyperliquid':
          await deleteApiKey(bot, userId, messageId, 'HyperLiquid');
          break;
          
        case 'api_keys_cancel_delete':
          // –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
          const exchange = userStates.get(userId)?.exchange || 'Paradex';
          await handleExchangeKeys(bot, userId, messageId, exchange, query.from.first_name);
          break;
          
        case 'api_keys_cancel_add':
          // –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
          const cancelExchange = userStates.get(userId)?.exchange || 'Paradex';
          userStates.delete(userId); // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          await handleExchangeKeys(bot, userId, messageId, cancelExchange, query.from.first_name);
          break;
      }
      
      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:', error);
      await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
  });
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∞ API –∫–ª—é—á–µ–π
  bot.on('message', async (msg) => {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!msg.text) return;
    
    const userId = msg.from.id;
    
    // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!userStates.has(userId)) return;
    
    const userState = userStates.get(userId);
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      try {
        await bot.deleteMessage(userId, msg.message_id);
      } catch (deleteError) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', deleteError);
      }
      
      switch (userState.state) {
        case 'waiting_api_key':
          // –ü–æ–ª—É—á–∏–ª–∏ API –∫–ª—é—á, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç
          userState.apiKey = msg.text;
          userState.state = 'waiting_api_secret';
          
          await bot.editMessageText(
            `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${userState.exchange}*\n\n` +
            `API –∫–ª—é—á –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ API Secret.`,
            {
              chat_id: userId,
              message_id: userState.messageId,
              parse_mode: 'Markdown',
              reply_markup: {
                inline_keyboard: [
                  [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_add' }]
                ]
              }
            }
          );
          break;
          
        case 'waiting_api_secret':
          // –ü–æ–ª—É—á–∏–ª–∏ —Å–µ–∫—Ä–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Å—Å—Ñ—Ä–∞–∑—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
          userState.apiSecret = msg.text;
          
          // –î–ª—è Paradex –∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –¥—Ä—É–≥–∏—Ö –±–∏—Ä–∂ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–∞—Å—Å—Ñ—Ä–∞–∑–∞
          if (userState.exchange === 'Paradex') {
            userState.state = 'waiting_passphrase';
            
            await bot.editMessageText(
              `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${userState.exchange}*\n\n` +
              `API Secret –ø–æ–ª—É—á–µ–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Å—Å—Ñ—Ä–∞–∑—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "–Ω–µ—Ç", –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è).`,
              {
                chat_id: userId,
                message_id: userState.messageId,
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_add' }]
                  ]
                }
              }
            );
          } else {
            // –î–ª—è –±–∏—Ä–∂ –±–µ–∑ –ø–∞—Å—Å—Ñ—Ä–∞–∑—ã —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
            await finalizeKeyAddition(bot, userId, userState);
          }
          break;
          
        case 'waiting_passphrase':
          // –ü–æ–ª—É—á–∏–ª–∏ –ø–∞—Å—Å—Ñ—Ä–∞–∑—É (–∏–ª–∏ "–Ω–µ—Ç"), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á
          userState.passphrase = msg.text.toLowerCase() === '–Ω–µ—Ç' ? null : msg.text;
          await finalizeKeyAddition(bot, userId, userState);
          break;
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –∫–ª—é—á–µ–π:', error);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      await bot.sendMessage(
        userId,
        `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ API –∫–ª—é—á–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`
      );
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      userStates.delete(userId);
    }
  });
  
  return {
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–≤–Ω–µ
    encryptApiKey,
    decryptApiKey
  };
};