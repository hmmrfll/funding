// handlers/apiKeys/actions.js
const { userStates, getUserExchangeKeys, saveApiKey, deleteUserApiKey } = require('./storage');
const { getExchangeKeysMarkup, getDeleteConfirmMarkup } = require('./ui');

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö –±–∏—Ä–∂–∏ –∏ –æ–ø—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
async function handleExchangeKeys(bot, userId, messageId, exchange, firstName) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è API –∫–ª—é—á–∏ –¥–ª—è —ç—Ç–æ–π –±–∏—Ä–∂–∏
    const userKeyResult = await getUserExchangeKeys(userId, exchange);
    
    let keyStatus = '';
    const hasKeys = userKeyResult.rows.length > 0;
    
    if (hasKeys) {
      const keyInfo = userKeyResult.rows[0];
      const status = keyInfo.is_active ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω';
      
      // –ú–∞—Å–∫–∏—Ä—É–µ–º API –∫–ª—é—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const maskedKey = '********';
      
      keyStatus = `*–¢–µ–∫—É—â–∏–π –∫–ª—é—á:* ${maskedKey} (${status})`;
    } else {
      keyStatus = `*–ö–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.*\n–î–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á –¥–ª—è ${exchange}, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.`;
    }
    
    await bot.editMessageText(
      `üîë *API –∫–ª—é—á–∏ –¥–ª—è ${exchange}*\n\n` +
      keyStatus + `\n\n` +
      `–î–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π API –∫–ª—é—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: getExchangeKeysMarkup(hasKeys, exchange)
      }
    );
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö ${exchange}:`, error);
    
    await bot.editMessageText(
      `üîë *API –∫–ª—é—á–∏ –¥–ª—è ${exchange}*\n\n` +
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'api_keys_back_to_exchanges' }]
          ]
        }
      }
    );
  }
}

/**
 * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞
 */
async function startKeyAddition(bot, userId, messageId, exchange) {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
    userStates.set(userId, {
      state: 'waiting_api_key',
      exchange: exchange,
      messageId: messageId
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await bot.editMessageText(
      `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${exchange}*\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à API –∫–ª—é—á.\n\n` +
      `*–í–∞–∂–Ω–æ:* –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞—à–∏–º–∏ API –∫–ª—é—á–∞–º–∏ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'api_keys_cancel_add' }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
    userStates.delete(userId);
    
    await bot.editMessageText(
      `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
          ]
        }
      }
    );
  }
}

/**
 * –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞
 */
async function confirmKeyDeletion(bot, userId, messageId, exchange) {
  try {
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±–∏—Ä–∂—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
    userStates.set(userId, { exchange: exchange });
    
    await bot.editMessageText(
      `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ –¥–ª—è ${exchange}*\n\n` +
      `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å API –∫–ª—é—á –¥–ª—è ${exchange}?\n\n` +
      `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: getDeleteConfirmMarkup(exchange)
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞:', error);
    
    await bot.editMessageText(
      `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
          ]
        }
      }
    );
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç API –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */
async function deleteApiKey(bot, userId, messageId, exchange) {
  try {
    // –£–¥–∞–ª—è–µ–º –∫–ª—é—á
    await deleteUserApiKey(userId, exchange);
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userStates.delete(userId);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–∞—Ö
    await bot.editMessageText(
      `‚úÖ *API –∫–ª—é—á —É–¥–∞–ª–µ–Ω*\n\n` +
      `API –∫–ª—é—á –¥–ª—è ${exchange} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
    
    await bot.editMessageText(
      `üóëÔ∏è *–£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      {
        chat_id: userId,
        message_id: messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${exchange.toLowerCase()}` }]
          ]
        }
      }
    );
  }
}

/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
 */
async function finalizeKeyAddition(bot, userId, userState) {
  try {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await saveApiKey(
      userId,
      userState.exchange,
      userState.apiKey,
      userState.apiSecret,
      userState.passphrase
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await bot.editMessageText(
      `‚úÖ *API –∫–ª—é—á —Å–æ—Ö—Ä–∞–Ω–µ–Ω*\n\n` +
      `API –∫–ª—é—á –¥–ª—è ${userState.exchange} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n` +
      `–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è —ç—Ç–æ–π –±–∏—Ä–∂–∏.`,
      {
        chat_id: userId,
        message_id: userState.messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${userState.exchange.toLowerCase()}` }]
          ]
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞:', error);
    
    await bot.editMessageText(
      `üîë *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞*\n\n` +
      `‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ API –∫–ª—é—á–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
      {
        chat_id: userId,
        message_id: userState.messageId,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: `api_keys_${userState.exchange.toLowerCase()}` }]
          ]
        }
      }
    );
    
    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(userId);
  }
}

module.exports = {
  handleExchangeKeys,
  startKeyAddition,
  confirmKeyDeletion,
  deleteApiKey,
  finalizeKeyAddition
};