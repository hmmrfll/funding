// bot/handlers/arbitrageHandler.js
const fundingArbitrageService = require('../../services/fundingArbitrageService');

module.exports = function createArbitrageHandler(bot) {
  // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  bot.onText(/\/arbitrage_opportunities/, async (msg) => {
    const userId = msg.from.id;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      const opportunities = await fundingArbitrageService.getArbitrageOpportunities(0.0005);
      
      if (opportunities.length === 0) {
        await bot.sendMessage(
          userId,
          '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —Ä–∞–∑–Ω–∏—Ü–µ–π —Å—Ç–∞–≤–æ–∫ –±–æ–ª–µ–µ 0.05%'
        );
        return;
      }
      
      let message = 'üîÑ *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:*\n\n';
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
      for (let i = 0; i < Math.min(5, opportunities.length); i++) {
        const opp = opportunities[i];
        const annualReturn = (Math.abs(opp.annualized_return) * 100).toFixed(2);
        
        message += `*${i+1}. ${opp.symbol}*\n`;
        message += `${opp.exchange1}: ${(opp.rate1 * 100).toFixed(4)}% vs ${opp.exchange2}: ${(opp.rate2 * 100).toFixed(4)}%\n`;
        message += `–†–∞–∑–Ω–∏—Ü–∞: ${(Math.abs(opp.rate_difference) * 100).toFixed(4)}%\n`;
        message += `–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ~${annualReturn}%\n`;
        message += `–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${opp.recommended_strategy}\n\n`;
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
      const inlineKeyboard = opportunities.slice(0, 5).map((opp, i) => {
        return [
          { 
            text: `–ê—Ä–±–∏—Ç—Ä–∞–∂ ${opp.symbol}`, 
            callback_data: `arbitrage_execute_${i}` 
          }
        ];
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
      global.arbitrageOpportunities = opportunities;
      
      await bot.sendMessage(userId, message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            ...inlineKeyboard,
            [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
          ]
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:', error);
      await bot.sendMessage(
        userId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
  const userArbitrageStates = new Map();
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (query) => {
    const userId = query.from.id;
    const messageId = query.message.message_id;
    const data = query.data;
    
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
      if (data.startsWith('arbitrage_execute_')) {
        const index = parseInt(data.replace('arbitrage_execute_', ''));
        
        if (!global.arbitrageOpportunities || index >= global.arbitrageOpportunities.length) {
          await bot.answerCallbackQuery(query.id, {
            text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.'
          });
          return;
        }
        
        const opportunity = global.arbitrageOpportunities[index];
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        userArbitrageStates.set(userId, { opportunity });
        
        await bot.editMessageText(
          `*–ê—Ä–±–∏—Ç—Ä–∞–∂ ${opportunity.symbol}*\n\n` +
          `${opportunity.exchange1}: ${(opportunity.rate1 * 100).toFixed(4)}% vs ${opportunity.exchange2}: ${(opportunity.rate2 * 100).toFixed(4)}%\n` +
          `–†–∞–∑–Ω–∏—Ü–∞: ${(Math.abs(opportunity.rate_difference) * 100).toFixed(4)}%\n\n` +
          `–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–≤ BTC –∏–ª–∏ –¥—Ä—É–≥–æ–π –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–µ):`,
          {
            chat_id: userId,
            message_id: messageId,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'arbitrage_cancel' }]
              ]
            }
          }
        );
      }
      
      // –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
      else if (data === 'arbitrage_cancel') {
        userArbitrageStates.delete(userId);
        
        await bot.editMessageText(
          '–û–ø–µ—Ä–∞—Ü–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.',
          {
            chat_id: userId,
            message_id: messageId
          }
        );
      }
      
      // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      else if (data.startsWith('arbitrage_close_')) {
        const strategyId = data.replace('arbitrage_close_', '');
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        if (!global.arbitrageStrategies || !global.arbitrageStrategies[strategyId]) {
          await bot.answerCallbackQuery(query.id, {
            text: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'
          });
          return;
        }
        
        const strategy = global.arbitrageStrategies[strategyId];
        
        await bot.editMessageText(
          `–ó–∞–∫—Ä—ã—Ç–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ ${strategy.long.symbol}...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`,
          {
            chat_id: userId,
            message_id: messageId
          }
        );
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏
        const result = await fundingArbitrageService.closeArbitragePositions(userId, strategy);
        
        await bot.editMessageText(
          `‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è ${strategy.long.symbol} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã!\n\n` +
          `Long –Ω–∞ ${strategy.long.exchange}: ${result.long.result.status || 'success'}\n` +
          `Short –Ω–∞ ${strategy.short.exchange}: ${result.short.result.status || 'success'}`,
          {
            chat_id: userId,
            message_id: messageId
          }
        );
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
        delete global.arbitrageStrategies[strategyId];
      }
      
      // –í –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ callback_query –¥–æ–±–∞–≤–∏–º:

else if (data === 'arbitrage_menu') {
    // –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    const opportunities = await fundingArbitrageService.getArbitrageOpportunities(0.0005);
    
    if (opportunities.length === 0) {
      await bot.editMessageText(
        '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å —Ä–∞–∑–Ω–∏—Ü–µ–π —Å—Ç–∞–≤–æ–∫ –±–æ–ª–µ–µ 0.05%',
        {
          chat_id: userId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: [
              [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
            ]
          }
        }
      );
      return;
    }
    
    let message = 'üîÑ *–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–Ω–¥–∏–Ω–≥–∞:*\n\n';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5 –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    for (let i = 0; i < Math.min(5, opportunities.length); i++) {
      const opp = opportunities[i];
      const annualReturn = (Math.abs(opp.annualized_return) * 100).toFixed(2);
      
      message += `*${i+1}. ${opp.symbol}*\n`;
      message += `${opp.exchange1}: ${(opp.rate1 * 100).toFixed(4)}% vs ${opp.exchange2}: ${(opp.rate2 * 100).toFixed(4)}%\n`;
      message += `–†–∞–∑–Ω–∏—Ü–∞: ${(Math.abs(opp.rate_difference) * 100).toFixed(4)}%\n`;
      message += `–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ~${annualReturn}%\n`;
      message += `–°—Ç—Ä–∞—Ç–µ–≥–∏—è: ${opp.recommended_strategy}\n\n`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
    const inlineKeyboard = opportunities.slice(0, 5).map((opp, i) => {
      return [
        { 
          text: `–ê—Ä–±–∏—Ç—Ä–∞–∂ ${opp.symbol}`, 
          callback_data: `arbitrage_execute_${i}` 
        }
      ];
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç
    global.arbitrageOpportunities = opportunities;
    
    await bot.editMessageText(message, {
      chat_id: userId,
      message_id: messageId,
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          ...inlineKeyboard,
          [{ text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'back_to_main_menu' }]
        ]
      }
    });
  }
      await bot.answerCallbackQuery(query.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞:', error);
      await bot.answerCallbackQuery(query.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞
  bot.on('message', async (msg) => {
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if (!msg.text || !userArbitrageStates.has(msg.from.id)) {
      return;
    }
    
    const userId = msg.from.id;
    const state = userArbitrageStates.get(userId);
    
    try {
      // –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
      const size = parseFloat(msg.text.trim());
      
      if (isNaN(size) || size <= 0) {
        await bot.sendMessage(
          userId,
          '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.'
        );
        return;
      }
      
      await bot.sendMessage(
        userId,
        `–ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è ${state.opportunity.symbol}...\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.`
      );
      
      // –ò—Å–ø–æ–ª–Ω—è–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
      const result = await fundingArbitrageService.executeArbitrageStrategy(
        userId, 
        state.opportunity, 
        size
      );
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–π
      if (!global.arbitrageStrategies) {
        global.arbitrageStrategies = {};
      }
      
      const strategyId = Date.now().toString();
      global.arbitrageStrategies[strategyId] = result;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏
      await bot.sendMessage(
        userId,
        `‚úÖ –ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è ${state.opportunity.symbol} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∞!\n\n` +
        `Long –Ω–∞ ${result.long.exchange}: ${result.long.symbol} (${result.long.result.status || 'success'})\n` +
        `Short –Ω–∞ ${result.short.exchange}: ${result.short.symbol} (${result.short.result.status || 'success'})\n\n` +
        `–û–∂–∏–¥–∞–µ–º–∞—è –≥–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ~${(Math.abs(state.opportunity.annualized_return) * 100).toFixed(2)}%`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: 'üîÑ –ó–∞–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏–∏', callback_data: `arbitrage_close_${strategyId}` }]
            ]
          }
        }
      );
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      userArbitrageStates.delete(userId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
      
      let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. ';
      
      if (error.response && error.response.data) {
        errorMessage += `–û—Ç–≤–µ—Ç –±–∏—Ä–∂–∏: ${JSON.stringify(error.response.data)}`;
      } else {
        errorMessage += error.message;
      }
      
      await bot.sendMessage(userId, errorMessage);
      userArbitrageStates.delete(userId);
    }
  });

  
};

